# (c) 2023 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terragrunt Project Deploy
on:
  workflow_dispatch:
    inputs:
      action:
        type: string
        description: 'The action to perfotm: plan/apply/destroy'
        required: true
        default: 'apply'
      environment:
        type: choice
        description: 'The environment to deploy'
        required: true
        default: 'dev'
        options:
          - dev
      working_directory:
        type: choice
        description: 'The working directory to use'
        required: true
        default: '.'
        options:
          - .
concurrency:
  group: plan-deploy-${{ github.repository }}
  cancel-in-progress: false
permissions:
  contents: write
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write
env:
  tofu_version: 1.7.1
  tg_version: 0.58.5
jobs:
  prevalidate:
    #if: ${{ startsWith(github.ref,'refs/heads/release/') || startsWith(github.ref,'refs/heads/develop') || startsWith(github.ref,'refs/heads/support/') || startsWith(github.ref,'refs/tags/v') }}
    runs-on: ubuntu-latest
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
  plan:
    needs:
      - prevalidate
    runs-on: ubuntu-latest
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
      # Get source of Configuration parameters (sensitive information)
      - name: Get Configuration source
        id: config_source
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.parameters.source' ./cloudopsworks-ci.yaml
      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' cloudopsworks-ci.yaml
      - name: Terragrunt plan ${{ inputs.working_directory }}
        uses: gruntwork-io/terragrunt-action@v2
        id: plan
        continue-on-error: ${{ steps.check_automatic.output.result != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_command: "run-all plan --terragrunt-non-interactive"
          tg_dir: ${{ inputs.working_directory }}
      - name: Search Plans
        id: search_plans
        run: |
          TFOUT="$(find . \( -not \( -path '*/.terragrunt-cache' -prune \) \) \( -name tfplan.out -o -name tfplan.json \))"
          echo "$TFOUT"          
          echo "tfplans<<EOF" >> $GITHUB_OUTPUT
          echo "$TFOUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Upload Plan files
        uses: actions/upload-artifact@v4
        with:
          name: environment-release-plan
          path: |
            .placeholder
            ${{ steps.search_plans.outputs.tfplans }}
            ${{ steps.search_plans.outputs.tfplans_json }}
  deploy:
    needs:
      - prevalidate
      - plan
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: environment-release-plan
          path: .
          merge-multiple: true
      - name: Terraform Plan prettifier
        uses: kishaningithub/setup-tf-summarize@v2
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          tf-summarize-version: v0.3.10
      - name: Terragrunt ${{ inputs.action }} ${{ inputs.working_directory }}
        uses: gruntwork-io/terragrunt-action@v2
        id: plan
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_command: "run-all ${{ inputs.action }} ${{ inputs.action == 'apply' && 'tfplan.out' || '' }} --terragrunt-non-interactive"
          tg_dir: ${{ inputs.working_directory }}
      # Create a VERSION file to use through the build
      - name: Set Version File
        env:
          NEXT_VERSION: "${{ github.ref_name }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION
      # Output Changelog from previous tag
      - name: Changelog
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          output: CHANGELOG.md
      # Create GitHub Release
#      - name: GitHub Release
#        uses: softprops/action-gh-release@v2
#        with:
#          token: ${{ secrets.BOT_TOKEN }}
#          name: "Release ${{ github.ref_name }}"
#          body_path: CHANGELOG.md
#          prerelease: ${{ steps.workspace.outputs.isPreRelease }}
#      # Push the changes to Git TAG before deploying anything
#      - name: Release Version
#        if: github.ref == 'master'
#        env:
#          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
#        run: |
#          VERSION=$(cat VERSION)
#          git config --global user.name "${{ vars.BOT_USER }}"
#          git config --global user.email "${{ vars.BOT_EMAIL }}"
#          git tag -fa v$VERSION -m "Environment Release v$VERSION"
#          git push origin v$VERSION
