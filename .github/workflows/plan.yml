##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terragrunt Project Plan on Pull request
on:
  pull_request:
    branches:
      - main
      - master
      - develop
      - support/**
      - release/**
    paths-ignore:
      #      - .github/workflows/**
      - modules/**

concurrency:
  group: plan-deploy-${{ github.repository }}
  cancel-in-progress: false


permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

env:
  tofu_version: 1.7.7
  tg_version: 0.76.3
  workind_dir: .

jobs:
  preload:
    outputs:
      runner_set: ${{ steps.runner_set.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - name: Get runnerset with yq from global-inputs.yaml
        id: runner_set
        uses: mikefarah/yq@master
        with:
          cmd: yq '.runner_set // "ubuntu-latest"' ./global-inputs.yaml

  plan:
    needs:
      - preload
    runs-on: ${{ needs.preload.outputs.runner_set }}
    outputs:
      auto_approve: ${{ steps.check_automatic.outputs.result }}
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      - name: Install runner-tools
        uses: cloudopsworks/blueprints/ci/common/install/runner-tools@v5.9

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Check if automatic
        id: check_automatic
        uses: mikefarah/yq@master
        with:
          cmd: yq '.cd.automatic' .github/cloudopsworks-ci.yaml | tr '[:upper:]' '[:lower:]'

      - name: Setup OpenTofu
        id: setup_opentofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.tofu_version }}
          tofu_wrapper: false
      - name: Setup Terragrunt v${{ env.tg_version }}
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.tg_version }}/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      # Get source of Configuration parameters (sensitive information)
      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' .github/cloudopsworks-ci.yaml

      - name: Update Terragrunt folders
        id: terragrunt_folders
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            // Traverse all directories looking for terragrunt.hcl files and elaborate a full hierarchical directory list for terragrunt
            // Example directory content structure:
            // - terragrunt.hcl
            // - networking/landing/useast1/hub-000/vpc/terragrunt.hcl
            // - networking/landing/useast1/hub-000/dns/terragrunt.hcl
            // - environments/dev/useast1/spoke-001/network/dns/terragrunt.hcl
            // - environments/dev/useast1/spoke-001/network/vpc/terragrunt.hcl
            // - environments/dev/useast1/spoke-001/network/vpc-tgw/terragrunt.hcl
            // Resulting list:
            // - /
            // - environments
            // - environments/dev
            // - environments/dev/useast1
            // - environments/dev/useast1/spoke-001
            // - environments/dev/useast1/spoke-001/network
            // - environments/dev/useast1/spoke-001/network/dns
            // - environments/dev/useast1/spoke-001/network/vpc
            // - environments/dev/useast1/spoke-001/network/vpc-tgw
            // - networking
            // - networking/landing
            // - networking/landing/useast1
            // - networking/landing/useast1/hub-000
            // - networking/landing/useast1/hub-000/dns
            // - networking/landing/useast1/hub-000/vpc            
            //
            // Return the list into action result as JSON
            
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            const { createHash } = require('crypto');
            
            const root = process.env.GITHUB_WORKSPACE;
            const terragruntFiles = execSync(`find ${root} -name terragrunt.hcl | grep -v .terragrunt-cache`).toString().split('\n');
            // Strip the root prefix from all terragruntFiles.
            terragruntFiles.forEach((file, index) => {
              terragruntFiles[index] = file.replace(root + '/', '');
            });
            const terragruntFolders = terragruntFiles.map( file => path.dirname(file) );
            // Generate all intermediate folders for each terragruntFolders up to root, strip the root string on all outputs, 
            // the resulting output must match the logic in referenced "Resulting list" comment.
            const allFolders = terragruntFolders.reduce((acc, folder) => {
              const folders = folder.split('/');
              const folderList = folders.reduce((acc, folder, index) => {
                const folderPath = folders.slice(0, index + 1).join('/');
                return acc.concat(folderPath);
              }, []);
              return acc.concat(folderList);
            }, []);
            const terragruntFoldersSet = new Set(allFolders);
            // Remove the element at index 0, which is an empty string.            
            terragruntFoldersSet.delete('');
            //terragruntFoldersSet.delete('.');
            const terragruntFoldersList = Array.from(terragruntFoldersSet).sort();
            
            console.log(JSON.stringify(terragruntFoldersList));
            core.setOutput('folders', JSON.stringify(terragruntFoldersList));
            return terragruntFoldersList;

      # Modify deploy YML wit yq command in order to insert the output from terragrunt_folders script
      # into the deploy.yml file on the yaml address: on.workflow_dispatch.inputs.working_directory.options
      - name: Modify deploy.yml with folderlist
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.on.workflow_dispatch.inputs.working_directory.options = ${{ steps.terragrunt_folders.outputs.folders }}' .github/workflows/deploy.yml

      # Push the change to the repository using plain git commands
      - name: Push Deploy Workflow
        continue-on-error: true
        run: |
          git config --global user.name "${{ vars.BOT_USER }}"
          git config --global user.email "${{ vars.BOT_EMAIL }}"
          git add .github/workflows/deploy.yml
          git commit -m "chore: Update deploy.yml with terragrunt folders"
          git push origin ${{ github.head_ref }}

      - name: Terragrunt Validate All
        id: validate
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYMENT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYMENT_AWS_SECRET_ACCESS_KEY }}
          ARM_CLIENT_ID: ${{ secrets.DEPLOYMENT_AZURE_SERVICE_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.DEPLOYMENT_AZURE_SERVICE_SECRET }}
          ARM_TENANT_ID: ${{ secrets.DEPLOYMENT_AZURE_TENANT_ID }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        continue-on-error: true
        run: |
          issue_num="${{ github.event.pull_request.number }}"
          # Use the GitHub CLI to get the list of files changed in the PR, strip last part of the path and sort
          changes=$(gh pr view $issue_num --json files --jq ".files.[].path" | sed 's/[^/]*$//' | grep -Ev ".git*|.cloudopsworks" | sort | uniq)
          echo "Changes: $changes"
          exit_code=0
          for item in $changes; do
            # Check there is a terragrunt .hcl file in directory
            if [ -f "$item/terragrunt.hcl" ]; then
              terragrunt --working-dir $item validate --non-interactive  
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
                echo "Error in $item"
                exit $exit_code
              fi
            fi
          done
          # default exit code
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

      - name: Terragrunt Check Updated Module Versions and Report
        id: check_version
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYMENT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYMENT_AWS_SECRET_ACCESS_KEY }}
          ARM_CLIENT_ID: ${{ secrets.DEPLOYMENT_AZURE_SERVICE_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.DEPLOYMENT_AZURE_SERVICE_SECRET }}
          ARM_TENANT_ID: ${{ secrets.DEPLOYMENT_AZURE_TENANT_ID }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        continue-on-error: true
        shell: bash
        run: |
          issue_num="${{ github.event.pull_request.number }}"
          # Use the GitHub CLI to get the list of files changed in the PR, strip last part of the path and sort
          changes=$(gh pr view $issue_num --json files --jq ".files.[].path" | sed 's/[^/]*$//' | grep -Ev ".git*|.cloudopsworks" | sort | uniq)
          echo "Changes: $changes"
          exit_code=0
          for item in $changes; do
            # Check there is a terragrunt .hcl file in directory
            if [ -f "$item/terragrunt.hcl" ]; then
              .cloudopsworks/hooks/module_versions.sh --path $item --report-ghaction --comment-pr-num $issue_num
            fi
          done
          # default exit code
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

      - name: Terragrunt Format Check
        id: fmt
        continue-on-error: true
        run: |
          items=$(find . -name 'terragrunt.hcl' -exec dirname {} \; | grep -v .terragrunt-cache | grep -v .cloudopsworks |sort)
          for item in $items; do
            terragrunt --working-dir $item hclfmt --check --non-interactive --diff
            exit_code=$?
            echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
            if [ $exit_code -ne 0 ]; then
              echo "Error in $item"
              exit $exit_code
            fi
          done

      - name: Write comment on PR about validation results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const pull_request_number = '${{ github.event.pull_request.number }}';
            
            const output = `Validation requested for Pull request.
            *Format check*: \`${{ steps.fmt.outputs.exit_code == 0 && 'OK' || 'FAILED' }}\`
            *Validation check*: \`${{ steps.validate.outputs.exit_code == 0 && 'OK' || 'FAILED' }}\` `;
            
            github.rest.issues.createComment({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });


      - name: Hard Fail Validation Not Success
        run: |
          result_fmt="${{ steps.fmt.outputs.exit_code }}"
          result_validate="${{ steps.validate.outputs.exit_code }}"
          
          if [[ "$result_fmt" == "0" && "$result_validate" == "0" ]] ; then
            echo "All OK... nothing todo"
          else
            echo "FMT=$result_fmt\nVALIDATE=$result_validate\n\nIt's NOT OK, will hard fail."
            exit 1
          fi

  # Proceed with labeling if the procedure is candidate to be autoapproved
  label_autoapprove:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ github.base_ref != 'master' && github.base_ref != 'main' && ( ! startsWith(github.base_ref, 'support') ) && github.event_name == 'pull_request' }}
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })

  # Job to add the required reviewers and approvals to the PR
  add_reviewers_and_approvals:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ ( github.base_ref == 'master' || github.base_ref == 'main' || startsWith(github.base_ref, 'support') ) && github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Read required Reviewers from config file
        id: reviewers_count
        uses: mikefarah/yq@master
        with:
          cmd: yq '.config.requiredReviewers' .github/cloudopsworks-ci.yaml

      - name: Read all reviewers from config file
        id: reviewers_json
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.config.reviewers' .github/cloudopsworks-ci.yaml

      - name: Add review and approval labels
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers_json.outputs.result }}');
            const reviewers_count=${{ steps.reviewers_count.outputs.result }};
            const labels = ['approval-required','review-required'];
            const actor = '${{ github.event.pull_request.user.login }}'

            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

  # Place a do-not-merge label untl all the conditions are met
  #   the conditions are:
  #     labels are: blue-green/new or blue-green/complete
  do_not_merge_label:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ ( github.base_ref == 'master' || github.base_ref == 'main' || startsWith(github.base_ref, 'support') ) && github.event_name == 'pull_request' }}
    outputs:
      is_mergeable: ${{ steps.check.outputs.result }}
    steps:
      - name: Set DO-NOT-MERGE if not in last step
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: pullLabels} = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            var is_mergeable = false;

            for (const aLabel of labels) {
              if ( aLabel == 'blue-green/new' || aLabel == 'approved' ) {
                is_mergeable = true;
              }
            }

            if ( ! is_mergeable ) {
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [ 'do-not-merge' ]
              });
            }

            return ( is_mergeable ? 'true' : 'false' );

