# (c) 2023 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Process OWNERS file for configuration changes
on:
  push:
    # Owners can be changed only on the following branches
    branches:
      - master
      - main
    paths:
      - OWNERS
      - cloudopsworks-ci.yaml
  workflow_dispatch:

concurrency: owners-terraform-project

jobs:
  process-owners:
    runs-on: ubuntu-latest
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - name: Retrieve branch protection rule
        uses: mikefarah/yq@v4.33.3
        id: branch_protection_rules
        with:
          cmd: yq e '.config.branchProtection' cloudopsworks-ci.yaml | grep true | wc -l

#      - name: Retrieve branch protection rule
#        uses: mikefarah/yq@v4.33.3
#        id: gitflow_protection
#        with:
#          cmd: yq e '.config.gitFlow' cloudopsworks-ci.yaml | grep true | wc -l

      - name: Retrieve protected sources
        uses: mikefarah/yq@v4.33.3
        id: protected_sources
        with:
          cmd: yq -o=json -I=0 '.config.protectedSources' cloudopsworks-ci.yaml

      - name: Check if automatic
        uses: mikefarah/yq@v4.33.3
        id: check_automatic
        with:
          cmd: yq e '.cd.automatic' cloudopsworks-ci.yaml | grep true | wc -l

      - name: Reviewers Count
        uses: mikefarah/yq@v4.33.3
        id: reviewers_count
        if: ${{ steps.check_automatic.outputs.result == 0 || steps.branch_protection_rules.outputs.result == 1 }}
        with:
          cmd: yq e '.config.requiredReviewers' cloudopsworks-ci.yaml

      - name: Reviewers list as JSON
        uses: mikefarah/yq@v4.33.3
        id: reviewers_list
        if: ${{ steps.check_automatic.outputs.result == 0 || steps.branch_protection_rules.outputs.result == 1 }}
        with:
          cmd: yq -o=json -I=0 '.config.reviewers' cloudopsworks-ci.yaml

      - name: Owners list as JSON
        uses: mikefarah/yq@v4.33.3
        id: owners_list
        if: ${{ steps.check_automatic.outputs.result == 0 || steps.branch_protection_rules.outputs.result == 1 }}
        with:
          cmd: yq -o=json -I=0 '.config.owners' cloudopsworks-ci.yaml

      - name: Contributors list as JSON
        uses: mikefarah/yq@v4.33.3
        id: contrib_list
        with:
          cmd: yq -o=json -I=0 '.config.contributors' cloudopsworks-ci.yaml

      - name: Deployments JSON
        uses: mikefarah/yq@v4.33.3
        id: deployments_json
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' cloudopsworks-ci.yaml

      - name: Contributor list form JSON
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const contrib_text = ${{ steps.contrib_list.outputs.result }};
            const contrib_json = contrib_text != null ? JSON.parse('${{ steps.contrib_list.outputs.result }}') : {};

            // Parse the Contributors List and add them to the repository
            // Users are plain names teams are prefixed by the org name
            // The role names are case insensitive and match github's permissions.
            // The role names are: admin, triage, write, read
            // The default role is read
            // contrib_json format will be as follows:
            //    { "admin": ["user1", "user2"], "triage": ["user3", "org1/team1"], "write": ["user5", "org1/team2"], "read": ["user7", "user8"] }
            for ( const [role, members] of Object.entries(contrib_json) ) {
              for ( const member of members ) {
                if ( member.includes("/") ) {
                  // This is a team
                  const team = member.split("/");
                  github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                    org: team[0],
                    team_slug: team[1],
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    permission: role
                  });
                } else {
                  // This is a user
                  github.rest.repos.addCollaborator({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    username: member,
                    permission: role
                  });
                }
              }
            }

      - name: Advanced Protection on GitFlow
        if: ${{ steps.branch_protection_rules.outputs.result == 1 }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const branchesStrict = ['main', 'master', 'support/*'];
            const branchesRelax = ['release/*', 'hotfix/*', 'feature/*', 'develop'];
            const cannot_delete = ['main', 'master', 'support/*', 'develop'];
            const protectedSources = JSON.parse('${{ steps.protected_sources.outputs.result }}');
            const reviewers_json = JSON.parse('${{ steps.reviewers_list.outputs.result }}');
            const owners_text = ${{ steps.owners_list.outputs.result }};
            const owners_json = owners_text != null ? JSON.parse('${{ steps.owners_list.outputs.result }}') : [];
            const contrib_text = ${{ steps.contrib_list.outputs.result }};
            const contrib_json = contrib_text != null ? JSON.parse('${{ steps.contrib_list.outputs.result }}') : {};
            const reviewers_count = ${{ steps.reviewers_count.outputs.result }};
            const actor = context.actor;
            
            // Get reviewers list
            var reviewers = [];
            for ( const rev of reviewers_json ) {
              reviewers.push(rev);
            }
            
            // Get owners list
            var owners = [];
            var owner_teams = [];
            for( const owner of owners_json ) {
              if ( owner.includes("/") ) {
                  team = owner.split("/");
                  owner_teams.push(team[1]);
                } else {
                  owners.push(owner);
                }
            }
            
            teams_query = `
              query($login: String!) {
                organization(login: $login) {
                  teams(first: 100) {
                    nodes {
                      id
                      name
                      slug
                    }
                  }
                }
              }
            `
            const teams_result = await github.graphql(teams_query, {login: context.repo.owner});
            
            members_query = `
              query($login: String!) {
                organization(login: $login) {
                  membersWithRole(first: 100) {
                    nodes {
                      login
                      id
                    }
                  }
                }
              }
            `
            
            const members_result = await github.graphql(members_query, {login: context.repo.owner});
            
            const owners_ids = [];
            for ( const team_name of owner_teams ) {
              console.log("team_name: " + team_name)
              team = teams_result.organization.teams.nodes.find( team => team.slug === team_name );
              if ( team != null ) {
                console.log("team_id" + team.id);
                owners_ids.push(team.id);
              }
            }
            
            for ( const member_name of owners ) {
              console.log("member_name: " + member_name)
              member = members_result.organization.membersWithRole.nodes.find( member => member.login === member_name );
              if ( member != null ) {
                console.log("member_id" + member.id);
                owners_ids.push(member.id);
              }
            }
            
            const reviewers_ids = [];
            for ( const reviewer_name of reviewers ) {
              console.log("reviewer_name: " + reviewer_name);
              reviewer = members_result.organization.membersWithRole.nodes.find( member => member.login === reviewer_name );
              if ( reviewer != null ) {
                console.log("reviewer_id" + reviewer.id);
                reviewers_ids.push(reviewer.id);
              }
            }
            
            // Protect the Branches using GraphQL
            const repo_query = `
              query($owner: String!, $repo: String!) {
                repository(owner:$owner, name:$repo) {
                  id
                  branchProtectionRules(first: 100) {
                    nodes {
                      id
                      pattern
                    }
                  }
                }
              }
            `;
            const repo_result = await github.graphql(repo_query, {owner: context.repo.owner, repo: context.repo.repo});
                        
            // Perform branch protection for each branch (as they are patterns) Stricter first
            // this module must cal GraphQL API instead of rest because of lack of support on wildcards
            // https://github.community/t/graphql-api-for-branch-protection-rules/17230              
            for ( const branch of branchesStrict ) {
              const rule_exists = repo_result.repository.branchProtectionRules.nodes.find( rule => rule.pattern === branch );
              const can_delete = ! cannot_delete.includes(branch);
              var protection_rule = '';
            
              var required_approve = reviewers_count > 0;
            
              const default_approved = true;
              const default_count = 0;
              
              if ( rule_exists == null ) {
                protection_rule = `
                  mutation($repo_id: ID!, $branch: String!, $required_approve: Boolean!, $reviewers_count: Int!, $admin_ids: [ID!], $reviewers_ids: [ID!], $contexts: [String!], $can_delete: Boolean!) {
                    createBranchProtectionRule(input: {
                      repositoryId: $repo_id,
                      pattern: $branch,
                      requiresApprovingReviews: $required_approve,
                      requiredApprovingReviewCount: $reviewers_count,
                      restrictsPushes: true,
                      pushActorIds: $admin_ids,
                      bypassForcePushActorIds: $admin_ids,
                      bypassPullRequestActorIds: $admin_ids,
                      restrictsReviewDismissals: true,
                      reviewDismissalActorIds: $reviewers_ids,
                      requiredStatusCheckContexts: $contexts,
                      allowsForcePushes: false,
                      requiresStrictStatusChecks: true,
                      requiresStatusChecks: true,
                      isAdminEnforced: false,
                      allowsDeletions: $can_delete
                    }) {
                      clientMutationId
                    }
                  }
                `;
              } else {
                protection_rule = `
                  mutation($rule_id: ID!, $required_approve: Boolean!, $reviewers_count: Int!, $admin_ids: [ID!], $reviewers_ids: [ID!], $contexts: [String!], $can_delete: Boolean!) {
                    updateBranchProtectionRule(input: {
                      branchProtectionRuleId: $rule_id,
                      requiresApprovingReviews: $required_approve,
                      requiredApprovingReviewCount: $reviewers_count,
                      restrictsPushes: true,
                      pushActorIds: $admin_ids,
                      bypassForcePushActorIds: $admin_ids,
                      bypassPullRequestActorIds: $admin_ids,
                      restrictsReviewDismissals: true,
                      reviewDismissalActorIds: $reviewers_ids,
                      requiredStatusCheckContexts: $contexts,
                      allowsForcePushes: false,
                      requiresStrictStatusChecks: true,
                      requiresStatusChecks: true,
                      isAdminEnforced: false,
                      allowsDeletions: $can_delete
                    }) {
                      clientMutationId
                    }
                  }
                `;
              }
              
              const vars = {
                repo_id: repo_result.repository.id,
                rule_id: rule_exists ? rule_exists.id : null,
                branch: branch,
                required_approve: default_approved,
                reviewers_count: default_count,
                admin_ids: owners_ids,
                reviewers_ids: reviewers_ids,
                contexts: [ "plan" ],
                can_delete: can_delete
              };
              await github.graphql(protection_rule, vars);
            }
            
            // Perform branch protection for each branch (as they are patterns) Relaxed ones
            // this module must cal GraphQL API instead of rest because of lack of support on wildcards
            // https://github.community/t/graphql-api-for-branch-protection-rules/17230              
            for (const branch of branchesRelax) {
              const rule_exists = repo_result.repository.branchProtectionRules.nodes.find(rule => rule.pattern === branch);
              const can_delete = ! cannot_delete.includes(branch);
              var protection_rule = '';
  
              if (rule_exists == null) {
                protection_rule = `
                  mutation($repo_id: ID!, $branch: String!, $required_approve: Boolean!, $reviewers_count: Int!, $admin_ids: [ID!], $reviewers_ids: [ID!], $contexts: [String!], $can_delete: Boolean!) {
                    createBranchProtectionRule(input: {
                      repositoryId: $repo_id,
                      pattern: $branch,
                      requiresApprovingReviews: $required_approve,
                      requiredApprovingReviewCount: $reviewers_count,
                      restrictsPushes: false,
                      pushActorIds: $admin_ids,
                      bypassForcePushActorIds: $admin_ids,
                      bypassPullRequestActorIds: $admin_ids,
                      restrictsReviewDismissals: true,
                      reviewDismissalActorIds: $reviewers_ids,
                      requiredStatusCheckContexts: $contexts,
                      allowsForcePushes: false,
                      requiresStrictStatusChecks: true,
                      requiresStatusChecks: true,
                      isAdminEnforced: false,
                      blocksCreations: false,
                      allowsDeletions: $can_delete
                    }) {
                      clientMutationId
                    }
                  }
                `;
              } else {
                protection_rule = `
                  mutation($rule_id: ID!, $required_approve: Boolean!, $reviewers_count: Int!, $admin_ids: [ID!], $reviewers_ids: [ID!], $contexts: [String!], $can_delete: Boolean!) {
                    updateBranchProtectionRule(input: {
                      branchProtectionRuleId: $rule_id,
                      requiresApprovingReviews: $required_approve,
                      requiredApprovingReviewCount: $reviewers_count,
                      restrictsPushes: false,
                      pushActorIds: $admin_ids,
                      bypassForcePushActorIds: $admin_ids,
                      bypassPullRequestActorIds: $admin_ids,
                      restrictsReviewDismissals: true,
                      reviewDismissalActorIds: $reviewers_ids,
                      requiredStatusCheckContexts: $contexts,
                      allowsForcePushes: false,
                      requiresStrictStatusChecks: true,
                      requiresStatusChecks: true,
                      isAdminEnforced: false,
                      blocksCreations: false,
                      allowsDeletions: $can_delete
                    }) {
                      clientMutationId
                    }
                  }
                `;
              }

              const vars = {
                repo_id: repo_result.repository.id,
                rule_id: rule_exists ? rule_exists.id : null,
                branch: branch,
                required_approve: false,
                reviewers_count: 0,
                admin_ids: owners_ids,
                reviewers_ids: reviewers_ids,
                contexts: [],
                can_delete: can_delete
              };
              await github.graphql(protection_rule, vars);
            }
            
            const rule_exists = repo_result.repository.branchProtectionRules.nodes.find(rule => rule.pattern === '*');
            var protection_rule = '';
            
            if (rule_exists == null) {
              protection_rule = `
                  mutation($repo_id: ID!, $branch: String!, $required_approve: Boolean!, $reviewers_count: Int!, $admin_ids: [ID!], $reviewers_ids: [ID!], $contexts: [String!]) {
                    createBranchProtectionRule(input: {
                      repositoryId: $repo_id,
                      pattern: $branch,
                      requiresApprovingReviews: $required_approve,
                      requiredApprovingReviewCount: $reviewers_count,
                      restrictsPushes: true,
                      pushActorIds: $admin_ids,
                      bypassForcePushActorIds: $admin_ids,
                      bypassPullRequestActorIds: $admin_ids,
                      restrictsReviewDismissals: true,
                      reviewDismissalActorIds: $reviewers_ids,
                      requiredStatusCheckContexts: $contexts,
                      allowsForcePushes: false,
                      requiresStrictStatusChecks: true,
                      requiresStatusChecks: true,
                      isAdminEnforced: false,
                      blocksCreations: true,
                      allowsDeletions: true
                    }) {
                      clientMutationId
                    }
                  }
                `;
            } else {
              protection_rule = `
                  mutation($rule_id: ID!, $required_approve: Boolean!, $reviewers_count: Int!, $admin_ids: [ID!], $reviewers_ids: [ID!], $contexts: [String!]) {
                    updateBranchProtectionRule(input: {
                      branchProtectionRuleId: $rule_id,
                      requiresApprovingReviews: $required_approve,
                      requiredApprovingReviewCount: $reviewers_count,
                      restrictsPushes: true,
                      pushActorIds: $admin_ids,
                      bypassForcePushActorIds: $admin_ids,
                      bypassPullRequestActorIds: $admin_ids,
                      restrictsReviewDismissals: true,
                      reviewDismissalActorIds: $reviewers_ids,
                      requiredStatusCheckContexts: $contexts,
                      allowsForcePushes: false,
                      requiresStrictStatusChecks: true,
                      requiresStatusChecks: true,
                      isAdminEnforced: false,
                      blocksCreations: true,
                      allowsDeletions: true
                    }) {
                      clientMutationId
                    }
                  }
                `;
            }
            
            const vars = {
              repo_id: repo_result.repository.id,
              rule_id: rule_exists ? rule_exists.id : null,
              branch: '*',
              required_approve: (reviewers_count > 0),
              reviewers_count: reviewers_count,
              admin_ids: owners_ids,
              reviewers_ids: reviewers_ids,
              contexts: ["deploy"]
            };
            await github.graphql(protection_rule, vars);

      - name: Advanced Deployment Environments Creation
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const deployments = JSON.parse('${{ steps.deployments_json.outputs.result }}');
            
            // The following loop will iterate the dict located in the deployments section of the cloudopsworks-ci.yaml file
            // and will create the environments and the targets for each environment
            // The JSON Format is as follows:
            //   {"develop":{"env":"dev","targetName":"dev-target"},"release":{"env":"production","targets":{"mastercard":{"env":"production","targetName":"sink-demo"}}},"test":{"env":"staging"},"prerelease":{"env":"staging"},"hotfix":{"env":"hotfix"},"pull_request":{"env":"pull_request"},"support":[{"match":"1.5.*","env":"demo","targetName":"demo"},{"match":"1.3.*","env":"demo2","targetName":"demo2"}]}
            const deployments_list = [];
            for ( const deploy in deployments) {
              const deployment = deployments[deploy];
              const env = deployment.env;
              var targetName = null;
              var targets = null;
              var isEnabled = deployment['enabled'] != null ? deployment.enabled : true;
              
              // console.debug("deploy: " + deploy);
              // console.debug('deployment: ' + JSON.stringify(deployment));
              
              if (deployment['targetName'] != null)
                targetName = deployment.targetName;
              if (deployment['targets'] != null)
                targets = deployment.targets;
              
              if ( isEnabled && deploy !== 'support' ) {
                deployments_list.push({
                  key: deploy + '/' + env,
                  name: deploy,
                  env: env,
                  targetName: targetName
                });
                
                for ( const target in targets ) {
                  const target_deployment = targets[target];
                  const target_env = target_deployment.env;
                  const target_targetName = target_deployment['targetName'];
                  
                  if ( isEnabled ) {
                    deployments_list.push({
                      key: deploy + '/' + target + '/' + target_env,
                      name: target,
                      env: target_env,
                      targetName: target_targetName
                    });
                  }
                }
              }
            }
            
            // console.debug('deployments_list: ' + JSON.stringify(deployments_list));
            
            // Create the environment through GraphQL Mutation set environment name and if is also production
            // check first if the environment exists on the repository
            var env_query = `
                query($repo_name: String!, $owner: String!) {
                  repository(owner: $owner, name: $repo_name) {
                    environments(first: 100) {
                      nodes {
                        name
                        id
                      }
                    }
                    id
                  }
                }
              `;
            
            var env_vars = {
              repo_name: context.repo.repo, 
              owner: context.repo.owner
            };
            
            const repo_result = await github.graphql(env_query, env_vars);

            // console.debug('repo_result: ' + JSON.stringify(repo_result));
            
            for ( const index in deployments_list ) { 
              const deploy = deployments_list[index];
              const env_name = deploy.name;
              const env_key = deploy.key;
              const targetName = deploy.targetName;
              
              // console.debug("env: " + env_key);
              // console.debug('param: ' + JSON.stringify(deploy));
              // console.debug('repo_result: ' + JSON.stringify(repo_result));
              
              const env_obj = repo_result.repository.environments.nodes.find( node => node.name === env_key );
              const env_exists = ( env_obj != null );
              
              env_query = '';
              env_vars = {};
              if ( ! env_exists ) {
                env_query = `
                  mutation($repo_id: ID!, $env: String!) {
                    createEnvironment(input: {
                      repositoryId: $repo_id,
                      name: $env
                    }) {
                      clientMutationId
                    }
                  }
                `;
                
                env_vars = {
                  repo_id: repo_result.repository.id,
                  env: env_key
                };
                await github.graphql(env_query, env_vars);
              }
            }
